{{>header}}

import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import type { Config } from './OpenAPI';
import { OpenAPI } from './OpenAPI';

{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/isStringWithValue}}


{{>functions/isBlob}}


{{>functions/isSuccess}}


{{>functions/getQueryString}}


{{>functions/getUrl}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>fetch/getHeaders}}


{{>xhr/getRequestBody}}


{{>xhr/sendRequest}}


{{>xhr/getResponseHeader}}


{{>xhr/getResponseBody}}


{{>functions/catchErrors}}


/**
 * Request using XHR client
 * @param {ApiRequestOptions} options The request options from the service
 * @param {Config} [localConfig] Runtime overrides for the specific API request
 * @returns ApiResult
 * @throws ApiError
 */
export async function request(options: ApiRequestOptions, localConfig?: Config): Promise<ApiResult> {
    const config = localConfig || OpenAPI;
    const url = getUrl(options, config);
    const response = await sendRequest(options, url, config);
    const responseBody = getResponseBody(response);
    const responseHeader = getResponseHeader(response, options.responseHeader);

    const result: ApiResult = {
        url,
        ok: isSuccess(response.status),
        status: response.status,
        statusText: response.statusText,
        body: responseHeader || responseBody,
    };

    catchErrors(options, result);
    return result;
}
